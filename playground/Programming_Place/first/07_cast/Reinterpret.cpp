/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Reinterpret.cpp                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hnoguchi <hnoguchi@student.42tokyo.jp>     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/04/18 10:34:45 by hnoguchi          #+#    #+#             */
/*   Updated: 2023/04/18 14:43:50 by hnoguchi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#if 0

C++のキャストの特徴
意図を明確にする。
意図に合わないキャスト構文を使用した場合、コンパイルエラーが発生する。
ただし、dynamic_cast の場合は、実行時にエラーが発生する。

キャストの名称<キャスト後の型>(式);

reinterpret_cast
// 式の値は変えずに型変換のみ行うので、
   式の値が変換後の型に適切なものか判断するのは、実装者の責任となる。
   メモリアドレスの調整が起こらない。
   実装に依存した仕様のため、移植性が低い。
// 整数型や列挙型と、ポインタ型との相互変換ができる。（型の大きさは実装依存。）
// 異なる型のポインタ間、または参照間の変換ができる。
   （変換後のポインタを間接参照した場合の結果は、実装依存。）
   （保証されているのは、変換後のポインタを変換前の型に戻せること。）
   （const, volatile を外すことはできない。）
// 異なる型の関数ポインタ間の変換ができる。
   （変換後にポインタへアクセスし、正しく関数が実行できるかは、実装依存。）
   （保証されているのは、変換後のポインタを変換前の型に戻せること。）

// 基底クラスを指すポインタから、派生クラスへのダウンキャストを行う場合に使用してはならない。
   （static_cast, dynamic_cast で行うこと。）

#endif

#include <iostream>

void	f(int v)
{
	std::cout << v << std::endl;
}

int	main()
{
	// 整数型や列挙型と、ポインタ型との相互変換ができる。（型の大きさは実装依存。）
	int	a = 100;
	int	*p = &a;
	std::cout << p << std::endl;

	unsigned long	ul = reinterpret_cast<unsigned long>(p);
	std:: cout << std::hex << ul << std::endl;

	p = reinterpret_cast<int *>(ul);
	std::cout << p << std::endl;

	// 異なる型のポインタ間、または参照間の変換ができる。
	int	n = 100;

	int		*np = &n;
	short	*sp = reinterpret_cast<short *>(np);
	std::cout << *sp << std::endl; // 結果は、保証されない。

	// 異なる型の関数ポインタ間の変換ができる。
	typedef void(*func_t)(short);

	func_t func = reinterpret_cast<func_t>(f);
	func(100); // 結果は、保証されない。
}
